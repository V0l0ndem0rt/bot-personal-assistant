import { message } from 'telegraf/filters'
import { createModelsKeyboard, mainMenuKeyboard } from '../bot/keyboards.js'
import { aiService, gigachat } from '../services/aiService.js'
import { taskService } from '../services/taskService.js'

// –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –º–æ–¥–µ–ª–∏
const ALLOWED_MODELS = ['GigaChat-2', 'GigaChat-2-Pro', 'GigaChat-2-Max']

export function registerAiCommands(bot) {
	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ë–∞–ª–∞–Ω—Å"
	bot.hears('üí∞ –ë–∞–ª–∞–Ω—Å', async ctx => {
		try {
			const balance = await gigachat.getBalance()
			await ctx.reply(
				`–ë–∞–ª–∞–Ω—Å —Ç–æ–∫–µ–Ω–æ–≤: \n${balance.balance
					.map(b => `${b.usage}: ${b.value}`)
					.join('\n')}`
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —Ç–æ–∫–µ–Ω–æ–≤.')
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"
	bot.hears('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥', async ctx => {
		try {
			await taskService.resetDialog(ctx.from.id)
			await ctx.reply('–î–∏–∞–ª–æ–≥ —Å–±—Ä–æ—à–µ–Ω.')
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞:', error)
			await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –¥–∏–∞–ª–æ–≥–∞.')
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å AI"
	bot.hears('‚öôÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–æ–¥–µ–ª—å AI', async ctx => {
		try {
			// –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –º–æ–¥–µ–ª–∏, –Ω–æ —Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ
			const allModels = await gigachat.allModels()
			const models = allModels
				.filter(model => ALLOWED_MODELS.includes(model.id))
				.map(model => ({ id: model.id }))

			const user = await taskService.getUser(ctx.from.id)
			const currentModel = user[0].model

			ctx.session.changingModel = true

			// –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏
			await ctx.reply(
				`–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: ${currentModel}\n–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å AI:`,
				createModelsKeyboard(models)
			)
		} catch (error) {
			console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–¥–µ–ª–µ–π:', error)
			await ctx.reply(
				'–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–æ–¥–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
			)
		}
	})

	// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è AI
	bot.on(message('text'), async (ctx, next) => {
		// –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ AI
		if (ctx.session && ctx.session.changingModel === true) {
			try {
				// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω–∞—è –º–æ–¥–µ–ª—å –≤ —Å–ø–∏—Å–∫–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö
				if (!ALLOWED_MODELS.includes(ctx.message.text)) {
					await ctx.reply(
						`–í—ã–±—Ä–∞–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–∞—è –º–æ–¥–µ–ª—å. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏: ${ALLOWED_MODELS.join(
							', '
						)}`
					)
					return
				}

				// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å
				await taskService.setUserModel(ctx.from.id, ctx.message.text)
				await ctx.reply(
					`–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "${ctx.message.text}".`
				)

				// –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
				await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', mainMenuKeyboard)

				// –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥
				ctx.session.changingModel = false
			} catch (error) {
				console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏:', error)
				await ctx.reply('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –º–æ–¥–µ–ª–∏.')
				ctx.session.changingModel = false
			}
		} else {
			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
			const isHandlingTask =
				ctx.session &&
				(ctx.session.addingTask ||
					ctx.session.deletingTask ||
					ctx.session.settingDueDate ||
					ctx.session.settingCategory)

			// –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –¥—Ä—É–≥–∏–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏,
			// —Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –µ–≥–æ –≤ AI
			if (!isHandlingTask) {
				try {
					const aiResponse = await aiService.askAI(
						ctx.message.text,
						ctx.from.id
					)
					await ctx.reply(aiResponse, { parse_mode: 'Markdown' })
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞ AI:', error)
					await ctx.reply(
						'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.'
					)
				}
			} else {
				return next()
			}
		}
	})
}
